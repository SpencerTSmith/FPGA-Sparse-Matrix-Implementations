// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module csr_vmul_csr_vmul_Pipeline_VITIS_LOOP_43_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY,
        m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY,
        m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID,
        m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA,
        m_axi_gmem_0_RLAST,
        m_axi_gmem_0_RID,
        m_axi_gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER,
        m_axi_gmem_0_RRESP,
        m_axi_gmem_0_BVALID,
        m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP,
        m_axi_gmem_0_BID,
        m_axi_gmem_0_BUSER,
        sext_ln43,
        wide_trip_count,
        sext_ln43_2,
        sext_ln43_3,
        vector_values,
        sum_out,
        sum_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_0_AWVALID;
input   m_axi_gmem_0_AWREADY;
output  [63:0] m_axi_gmem_0_AWADDR;
output  [0:0] m_axi_gmem_0_AWID;
output  [31:0] m_axi_gmem_0_AWLEN;
output  [2:0] m_axi_gmem_0_AWSIZE;
output  [1:0] m_axi_gmem_0_AWBURST;
output  [1:0] m_axi_gmem_0_AWLOCK;
output  [3:0] m_axi_gmem_0_AWCACHE;
output  [2:0] m_axi_gmem_0_AWPROT;
output  [3:0] m_axi_gmem_0_AWQOS;
output  [3:0] m_axi_gmem_0_AWREGION;
output  [0:0] m_axi_gmem_0_AWUSER;
output   m_axi_gmem_0_WVALID;
input   m_axi_gmem_0_WREADY;
output  [31:0] m_axi_gmem_0_WDATA;
output  [3:0] m_axi_gmem_0_WSTRB;
output   m_axi_gmem_0_WLAST;
output  [0:0] m_axi_gmem_0_WID;
output  [0:0] m_axi_gmem_0_WUSER;
output   m_axi_gmem_0_ARVALID;
input   m_axi_gmem_0_ARREADY;
output  [63:0] m_axi_gmem_0_ARADDR;
output  [0:0] m_axi_gmem_0_ARID;
output  [31:0] m_axi_gmem_0_ARLEN;
output  [2:0] m_axi_gmem_0_ARSIZE;
output  [1:0] m_axi_gmem_0_ARBURST;
output  [1:0] m_axi_gmem_0_ARLOCK;
output  [3:0] m_axi_gmem_0_ARCACHE;
output  [2:0] m_axi_gmem_0_ARPROT;
output  [3:0] m_axi_gmem_0_ARQOS;
output  [3:0] m_axi_gmem_0_ARREGION;
output  [0:0] m_axi_gmem_0_ARUSER;
input   m_axi_gmem_0_RVALID;
output   m_axi_gmem_0_RREADY;
input  [31:0] m_axi_gmem_0_RDATA;
input   m_axi_gmem_0_RLAST;
input  [0:0] m_axi_gmem_0_RID;
input  [8:0] m_axi_gmem_0_RFIFONUM;
input  [0:0] m_axi_gmem_0_RUSER;
input  [1:0] m_axi_gmem_0_RRESP;
input   m_axi_gmem_0_BVALID;
output   m_axi_gmem_0_BREADY;
input  [1:0] m_axi_gmem_0_BRESP;
input  [0:0] m_axi_gmem_0_BID;
input  [0:0] m_axi_gmem_0_BUSER;
input  [31:0] sext_ln43;
input  [31:0] wide_trip_count;
input  [61:0] sext_ln43_2;
input  [61:0] sext_ln43_3;
input  [63:0] vector_values;
output  [31:0] sum_out;
output   sum_out_ap_vld;

reg ap_idle;
reg m_axi_gmem_0_ARVALID;
reg[63:0] m_axi_gmem_0_ARADDR;
reg m_axi_gmem_0_RREADY;
reg sum_out_ap_vld;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage5;
reg    ap_block_pp0_stage5_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] icmp_ln43_reg_349;
reg    ap_condition_exit_pp0_iter0_stage5;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_grp1;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4_grp3;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_grp2;
reg    ap_block_pp0_stage3_subdone_grp2_done_reg;
reg    ap_block_pp0_stage3_subdone_grp2;
reg    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage5_grp4;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_grp5;
wire    ap_block_pp0_stage3_grp6;
reg    ap_block_pp0_stage3_subdone_grp6_done_reg;
reg    ap_block_pp0_stage3_subdone_grp6;
wire    ap_block_pp0_stage0_11001;
wire  signed [63:0] sext_ln43_3_cast_fu_161_p1;
reg  signed [63:0] sext_ln43_3_cast_reg_329;
wire  signed [63:0] sext_ln43_2_cast_fu_165_p1;
reg  signed [63:0] sext_ln43_2_cast_reg_334;
wire  signed [63:0] wide_trip_count_cast_fu_169_p1;
reg  signed [63:0] wide_trip_count_cast_reg_339;
reg   [63:0] i_1_reg_344;
reg    ap_block_pp0_stage1_11001;
wire   [0:0] icmp_ln43_fu_198_p2;
reg   [0:0] icmp_ln43_reg_349_pp0_iter1_reg;
reg   [0:0] icmp_ln43_reg_349_pp0_iter2_reg;
reg   [0:0] icmp_ln43_reg_349_pp0_iter3_reg;
reg   [63:0] gmem_addr_reg_353;
reg   [63:0] gmem_addr_1_reg_359;
reg   [31:0] gmem_addr_read_reg_365;
reg    ap_block_pp0_stage4_11001_grp3;
reg   [31:0] gmem_addr_read_reg_365_pp0_iter2_reg;
reg   [31:0] gmem_addr_1_read_reg_370;
reg    ap_block_pp0_stage5_11001_grp4;
reg   [63:0] gmem_addr_2_reg_375;
reg   [31:0] gmem_addr_2_read_reg_381;
reg    ap_block_pp0_stage3_11001_grp6;
wire    ap_block_pp0_stage4_11001_grp0;
reg    ap_block_pp0_stage4_subdone_grp0_done_reg;
wire    ap_block_pp0_stage4_subdone_grp0;
reg    ap_block_pp0_stage4_subdone;
wire   [31:0] grp_fu_157_p2;
reg   [31:0] mul_reg_396;
wire    ap_block_pp0_stage1_11001_grp0;
reg    ap_block_pp0_stage1_subdone_grp0_done_reg;
wire    ap_block_pp0_stage1_subdone_grp0;
reg    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_11001_grp0;
reg    ap_block_pp0_stage2_subdone_grp0_done_reg;
wire    ap_block_pp0_stage2_subdone_grp0;
reg    ap_block_pp0_stage2_subdone;
wire   [31:0] grp_fu_153_p2;
reg   [31:0] sum_1_reg_406;
wire   [63:0] add_ln45_fu_209_p2;
wire    ap_block_pp0_stage1;
wire   [63:0] add_ln45_1_fu_220_p2;
wire  signed [63:0] sext_ln45_1_fu_272_p1;
wire    ap_block_pp0_stage0;
reg    ap_block_state3_io_grp1;
reg    ap_block_pp0_stage2_11001_grp1;
reg    ap_block_state4_io_grp2;
reg    ap_block_pp0_stage3_11001_grp2;
reg    ap_block_pp0_stage1_11001_grp5;
reg   [31:0] sum_fu_68;
wire    ap_block_pp0_stage1_grp0;
wire    ap_loop_init;
wire    ap_block_pp0_stage2_grp0;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_block_pp0_stage5_11001;
reg    ap_condition_exit_pp0_iter4_stage1;
reg    ap_idle_pp0_0to3;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [63:0] i_fu_72;
wire   [63:0] add_ln43_1_fu_236_p2;
wire  signed [63:0] sext_ln43_cast_fu_173_p1;
reg   [63:0] indvar_fu_76;
wire   [63:0] add_ln43_fu_203_p2;
wire    ap_block_pp0_stage1_01001_grp0;
wire   [31:0] grp_fu_157_p0;
wire   [31:0] grp_fu_157_p1;
wire    ap_block_pp0_stage4_grp0;
wire   [33:0] shl_ln1_fu_246_p3;
wire  signed [63:0] sext_ln45_fu_253_p1;
wire   [63:0] add_ln45_2_fu_257_p2;
wire   [61:0] trunc_ln2_fu_262_p4;
reg    grp_fu_153_ce;
reg    ap_block_pp0_stage2_11001;
reg    ap_block_pp0_stage3_11001;
reg    ap_block_pp0_stage4_11001;
wire    ap_block_pp0_stage3_11001_grp0;
reg    ap_block_pp0_stage3_subdone_grp0_done_reg;
wire    ap_block_pp0_stage3_subdone_grp0;
wire    ap_block_pp0_stage5_11001_grp0;
reg    ap_block_pp0_stage5_subdone_grp0_done_reg;
wire    ap_block_pp0_stage5_subdone_grp0;
reg    grp_fu_157_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [5:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to5;
reg    ap_done_pending_pp0;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_block_pp0_stage3_subdone_grp2_done_reg = 1'b0;
#0 ap_block_pp0_stage3_subdone_grp6_done_reg = 1'b0;
#0 ap_block_pp0_stage4_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage1_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage2_subdone_grp0_done_reg = 1'b0;
#0 sum_fu_68 = 32'd0;
#0 i_fu_72 = 64'd0;
#0 indvar_fu_76 = 64'd0;
#0 ap_block_pp0_stage3_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage5_subdone_grp0_done_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

csr_vmul_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_fu_68),
    .din1(mul_reg_396),
    .ce(grp_fu_153_ce),
    .dout(grp_fu_153_p2)
);

csr_vmul_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_157_p0),
    .din1(grp_fu_157_p1),
    .ce(grp_fu_157_ce),
    .dout(grp_fu_157_p2)
);

csr_vmul_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage5),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp0)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage2_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage2)) begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_block_pp0_stage2_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage2_subdone_grp0)) begin
                ap_block_pp0_stage2_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage3_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_block_pp0_stage3_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage3_subdone_grp0)) begin
                ap_block_pp0_stage3_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage3_subdone_grp2_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_block_pp0_stage3_subdone_grp2_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage3_subdone_grp2)) begin
                ap_block_pp0_stage3_subdone_grp2_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage3_subdone_grp6_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_block_pp0_stage3_subdone_grp6_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage3_subdone_grp6)) begin
                ap_block_pp0_stage3_subdone_grp6_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage4_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage4)) begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_block_pp0_stage4_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage4_subdone_grp0)) begin
                ap_block_pp0_stage4_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage5_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage5)) begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_block_pp0_stage5_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage5_subdone_grp0)) begin
                ap_block_pp0_stage5_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage5)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage1))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage1))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_72 <= sext_ln43_cast_fu_173_p1;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln43_reg_349 == 1'd1))) begin
            i_fu_72 <= add_ln43_1_fu_236_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_fu_76 <= 64'd0;
    end else if (((icmp_ln43_fu_198_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        indvar_fu_76 <= add_ln43_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_fu_68 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0))) begin
        sum_fu_68 <= sum_1_reg_406;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001_grp4))) begin
        gmem_addr_1_read_reg_370 <= m_axi_gmem_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        gmem_addr_1_reg_359 <= add_ln45_1_fu_220_p2;
        gmem_addr_reg_353 <= add_ln45_fu_209_p2;
        i_1_reg_344 <= i_fu_72;
        icmp_ln43_reg_349 <= icmp_ln43_fu_198_p2;
        icmp_ln43_reg_349_pp0_iter1_reg <= icmp_ln43_reg_349;
        icmp_ln43_reg_349_pp0_iter2_reg <= icmp_ln43_reg_349_pp0_iter1_reg;
        icmp_ln43_reg_349_pp0_iter3_reg <= icmp_ln43_reg_349_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001_grp6) & (1'b0 == ap_block_pp0_stage3_subdone_grp6_done_reg))) begin
        gmem_addr_2_read_reg_381 <= m_axi_gmem_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_2_reg_375 <= sext_ln45_1_fu_272_p1;
        sext_ln43_2_cast_reg_334 <= sext_ln43_2_cast_fu_165_p1;
        sext_ln43_3_cast_reg_329 <= sext_ln43_3_cast_fu_161_p1;
        sum_1_reg_406 <= grp_fu_153_p2;
        wide_trip_count_cast_reg_339 <= wide_trip_count_cast_fu_169_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001_grp3))) begin
        gmem_addr_read_reg_365 <= m_axi_gmem_0_RDATA;
        gmem_addr_read_reg_365_pp0_iter2_reg <= gmem_addr_read_reg_365;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0))) begin
        mul_reg_396 <= grp_fu_157_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln43_reg_349 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage5_subdone))) begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln43_reg_349_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_condition_exit_pp0_iter4_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter4_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready_pp0_iter4_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (ap_loop_exit_ready == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to5 = 1'b1;
    end else begin
        ap_idle_pp0_1to5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage5_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_grp5)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln43_reg_349 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone_grp2_done_reg) & (1'b0 == ap_block_pp0_stage3_grp2)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln43_reg_349 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_grp1)))) begin
        gmem_blk_n_AR = m_axi_gmem_0_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone_grp6_done_reg) & (1'b0 == ap_block_pp0_stage3_grp6)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_grp4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_grp3)))) begin
        gmem_blk_n_R = m_axi_gmem_0_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage5_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage3_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage4_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage2_11001_grp0)))) begin
        grp_fu_153_ce = 1'b1;
    end else begin
        grp_fu_153_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage5_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage4_11001_grp0)))) begin
        grp_fu_157_ce = 1'b1;
    end else begin
        grp_fu_157_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_grp5))) begin
        m_axi_gmem_0_ARADDR = gmem_addr_2_reg_375;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln43_reg_349 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001_grp2) & (1'b0 == ap_block_pp0_stage3_subdone_grp2_done_reg))) begin
        m_axi_gmem_0_ARADDR = gmem_addr_1_reg_359;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln43_reg_349 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001_grp1))) begin
        m_axi_gmem_0_ARADDR = gmem_addr_reg_353;
    end else begin
        m_axi_gmem_0_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_grp5)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln43_reg_349 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001_grp2) & (1'b0 == ap_block_pp0_stage3_subdone_grp2_done_reg)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln43_reg_349 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001_grp1)))) begin
        m_axi_gmem_0_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001_grp6) & (1'b0 == ap_block_pp0_stage3_subdone_grp6_done_reg)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001_grp4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001_grp3)))) begin
        m_axi_gmem_0_RREADY = 1'b1;
    end else begin
        m_axi_gmem_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (icmp_ln43_reg_349_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0))) begin
        sum_out_ap_vld = 1'b1;
    end else begin
        sum_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to5 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln43_1_fu_236_p2 = (i_1_reg_344 + 64'd1);

assign add_ln43_fu_203_p2 = (indvar_fu_76 + 64'd1);

assign add_ln45_1_fu_220_p2 = ($signed(indvar_fu_76) + $signed(sext_ln43_3_cast_reg_329));

assign add_ln45_2_fu_257_p2 = ($signed(sext_ln45_fu_253_p1) + $signed(vector_values));

assign add_ln45_fu_209_p2 = ($signed(indvar_fu_76) + $signed(sext_ln43_2_cast_reg_334));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((m_axi_gmem_0_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_pp0_stage1_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001_grp5 = ((m_axi_gmem_0_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_pp0_stage1_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_grp5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((m_axi_gmem_0_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_pp0_stage1_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((1'b1 == ap_block_state3_io_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage2_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001_grp1 = ((1'b1 == ap_block_state3_io_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage2_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((1'b1 == ap_block_state3_io_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage2_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = (((1'b1 == ap_block_state4_io_grp2) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone_grp2_done_reg)) | ((m_axi_gmem_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone_grp6_done_reg)));
end

assign ap_block_pp0_stage3_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001_grp2 = ((1'b1 == ap_block_state4_io_grp2) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone_grp2_done_reg));
end

always @ (*) begin
    ap_block_pp0_stage3_11001_grp6 = ((m_axi_gmem_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone_grp6_done_reg));
end

assign ap_block_pp0_stage3_grp2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_grp6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_subdone = (((1'b1 == ap_block_state4_io_grp2) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone_grp2_done_reg)) | ((m_axi_gmem_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone_grp6_done_reg)));
end

assign ap_block_pp0_stage3_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_subdone_grp2 = ((1'b1 == ap_block_state4_io_grp2) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone_grp2_done_reg));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone_grp6 = ((m_axi_gmem_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone_grp6_done_reg));
end

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((m_axi_gmem_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage4_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001_grp3 = ((m_axi_gmem_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage4_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_grp3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((m_axi_gmem_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage4_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((m_axi_gmem_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage5_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001_grp4 = ((m_axi_gmem_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage5_grp4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((m_axi_gmem_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage5_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io_grp1 = ((m_axi_gmem_0_ARREADY == 1'b0) & (icmp_ln43_reg_349 == 1'd1));
end

always @ (*) begin
    ap_block_state4_io_grp2 = ((m_axi_gmem_0_ARREADY == 1'b0) & (icmp_ln43_reg_349 == 1'd1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage5;

assign ap_ready = ap_ready_sig;

assign grp_fu_157_p0 = gmem_addr_read_reg_365_pp0_iter2_reg;

assign grp_fu_157_p1 = gmem_addr_2_read_reg_381;

assign icmp_ln43_fu_198_p2 = (($signed(i_fu_72) < $signed(wide_trip_count_cast_reg_339)) ? 1'b1 : 1'b0);

assign m_axi_gmem_0_ARBURST = 2'd0;

assign m_axi_gmem_0_ARCACHE = 4'd0;

assign m_axi_gmem_0_ARID = 1'd0;

assign m_axi_gmem_0_ARLEN = 64'd1;

assign m_axi_gmem_0_ARLOCK = 2'd0;

assign m_axi_gmem_0_ARPROT = 3'd0;

assign m_axi_gmem_0_ARQOS = 4'd0;

assign m_axi_gmem_0_ARREGION = 4'd0;

assign m_axi_gmem_0_ARSIZE = 3'd0;

assign m_axi_gmem_0_ARUSER = 1'd0;

assign m_axi_gmem_0_AWADDR = 64'd0;

assign m_axi_gmem_0_AWBURST = 2'd0;

assign m_axi_gmem_0_AWCACHE = 4'd0;

assign m_axi_gmem_0_AWID = 1'd0;

assign m_axi_gmem_0_AWLEN = 32'd0;

assign m_axi_gmem_0_AWLOCK = 2'd0;

assign m_axi_gmem_0_AWPROT = 3'd0;

assign m_axi_gmem_0_AWQOS = 4'd0;

assign m_axi_gmem_0_AWREGION = 4'd0;

assign m_axi_gmem_0_AWSIZE = 3'd0;

assign m_axi_gmem_0_AWUSER = 1'd0;

assign m_axi_gmem_0_AWVALID = 1'b0;

assign m_axi_gmem_0_BREADY = 1'b0;

assign m_axi_gmem_0_WDATA = 32'd0;

assign m_axi_gmem_0_WID = 1'd0;

assign m_axi_gmem_0_WLAST = 1'b0;

assign m_axi_gmem_0_WSTRB = 4'd0;

assign m_axi_gmem_0_WUSER = 1'd0;

assign m_axi_gmem_0_WVALID = 1'b0;

assign sext_ln43_2_cast_fu_165_p1 = $signed(sext_ln43_2);

assign sext_ln43_3_cast_fu_161_p1 = $signed(sext_ln43_3);

assign sext_ln43_cast_fu_173_p1 = $signed(sext_ln43);

assign sext_ln45_1_fu_272_p1 = $signed(trunc_ln2_fu_262_p4);

assign sext_ln45_fu_253_p1 = $signed(shl_ln1_fu_246_p3);

assign shl_ln1_fu_246_p3 = {{gmem_addr_1_read_reg_370}, {2'd0}};

assign sum_out = sum_fu_68;

assign trunc_ln2_fu_262_p4 = {{add_ln45_2_fu_257_p2[63:2]}};

assign wide_trip_count_cast_fu_169_p1 = $signed(wide_trip_count);

endmodule //csr_vmul_csr_vmul_Pipeline_VITIS_LOOP_43_2
