// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="csr_vmul_csr_vmul,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=3355,HLS_SYN_LUT=3705,HLS_VERSION=2024_2}" *)

module csr_vmul (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt,
        s_axi_control_r_AWVALID,
        s_axi_control_r_AWREADY,
        s_axi_control_r_AWADDR,
        s_axi_control_r_WVALID,
        s_axi_control_r_WREADY,
        s_axi_control_r_WDATA,
        s_axi_control_r_WSTRB,
        s_axi_control_r_ARVALID,
        s_axi_control_r_ARREADY,
        s_axi_control_r_ARADDR,
        s_axi_control_r_RVALID,
        s_axi_control_r_RREADY,
        s_axi_control_r_RDATA,
        s_axi_control_r_RRESP,
        s_axi_control_r_BVALID,
        s_axi_control_r_BREADY,
        s_axi_control_r_BRESP
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_state11 = 21'd1024;
parameter    ap_ST_fsm_state12 = 21'd2048;
parameter    ap_ST_fsm_state13 = 21'd4096;
parameter    ap_ST_fsm_state14 = 21'd8192;
parameter    ap_ST_fsm_state15 = 21'd16384;
parameter    ap_ST_fsm_state16 = 21'd32768;
parameter    ap_ST_fsm_state17 = 21'd65536;
parameter    ap_ST_fsm_state18 = 21'd131072;
parameter    ap_ST_fsm_state19 = 21'd262144;
parameter    ap_ST_fsm_state20 = 21'd524288;
parameter    ap_ST_fsm_state21 = 21'd1048576;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_R_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_R_ADDR_WIDTH = 7;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_CONTROL_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;
input   s_axi_control_r_AWVALID;
output   s_axi_control_r_AWREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_AWADDR;
input   s_axi_control_r_WVALID;
output   s_axi_control_r_WREADY;
input  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_WDATA;
input  [C_S_AXI_CONTROL_R_WSTRB_WIDTH - 1:0] s_axi_control_r_WSTRB;
input   s_axi_control_r_ARVALID;
output   s_axi_control_r_ARREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_ARADDR;
output   s_axi_control_r_RVALID;
input   s_axi_control_r_RREADY;
output  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_RDATA;
output  [1:0] s_axi_control_r_RRESP;
output   s_axi_control_r_BVALID;
input   s_axi_control_r_BREADY;
output  [1:0] s_axi_control_r_BRESP;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] matrix_row_count;
wire   [31:0] matrix_col_count;
wire   [31:0] matrix_non_zero_count;
wire   [63:0] matrix_row_pointers;
wire   [63:0] matrix_col_indices;
wire   [63:0] matrix_values;
wire   [63:0] vector_values;
wire   [31:0] vector_count;
wire   [63:0] out_values;
wire   [31:0] out_count;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state2;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state16;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state21;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state4;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
reg   [63:0] vector_values_read_reg_362;
reg   [63:0] matrix_values_read_reg_367;
reg   [63:0] matrix_col_indices_read_reg_372;
reg   [63:0] matrix_row_pointers_read_reg_377;
reg   [31:0] matrix_row_count_read_reg_388;
reg   [63:0] gmem_addr_reg_393;
wire   [30:0] empty_fu_229_p3;
reg   [30:0] empty_reg_399;
reg   [63:0] gmem_addr_1_reg_407;
wire    ap_CS_fsm_state3;
reg   [31:0] i_reg_413;
reg   [31:0] gmem_addr_1_read_1_reg_419;
reg   [61:0] trunc_ln43_1_reg_424;
reg   [61:0] trunc_ln43_2_reg_429;
wire    grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_ap_start;
wire    grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_ap_done;
wire    grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_ap_idle;
wire    grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_ap_ready;
wire    grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_AWVALID;
wire   [63:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_AWADDR;
wire   [0:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_AWID;
wire   [31:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_AWLEN;
wire   [2:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_AWSIZE;
wire   [1:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_AWBURST;
wire   [1:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_AWLOCK;
wire   [3:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_AWCACHE;
wire   [2:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_AWPROT;
wire   [3:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_AWQOS;
wire   [3:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_AWREGION;
wire   [0:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_AWUSER;
wire    grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_WVALID;
wire   [31:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_WDATA;
wire   [3:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_WSTRB;
wire    grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_WLAST;
wire   [0:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_WID;
wire   [0:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_WUSER;
wire    grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARVALID;
wire   [63:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARADDR;
wire   [0:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARID;
wire   [31:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARLEN;
wire   [2:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARSIZE;
wire   [1:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARBURST;
wire   [1:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARLOCK;
wire   [3:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARCACHE;
wire   [2:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARPROT;
wire   [3:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARQOS;
wire   [3:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARREGION;
wire   [0:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARUSER;
wire    grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_RREADY;
wire    grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_BREADY;
wire   [31:0] grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_sum_out;
wire    grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_sum_out_ap_vld;
reg    gmem_0_AWVALID;
wire    gmem_0_AWREADY;
wire   [31:0] gmem_0_AWLEN;
reg    gmem_0_WVALID;
wire    gmem_0_WREADY;
wire   [31:0] gmem_0_WDATA;
reg    gmem_0_ARVALID;
wire    gmem_0_ARREADY;
reg   [63:0] gmem_0_ARADDR;
reg   [31:0] gmem_0_ARLEN;
wire    gmem_0_RVALID;
reg    gmem_0_RREADY;
wire   [31:0] gmem_0_RDATA;
wire   [8:0] gmem_0_RFIFONUM;
wire    gmem_0_BVALID;
reg    gmem_0_BREADY;
reg    grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_ap_start_reg;
reg   [20:0] ap_NS_fsm;
wire    ap_NS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state14;
wire  signed [63:0] sext_ln39_fu_219_p1;
wire  signed [63:0] sext_ln43_fu_291_p1;
wire   [0:0] icmp_ln39_1_fu_253_p2;
reg   [30:0] row_fu_116;
wire   [30:0] indvars_iv_next7_fu_258_p2;
wire   [61:0] trunc_ln_fu_209_p4;
wire   [0:0] icmp_ln39_fu_199_p2;
wire   [30:0] trunc_ln39_fu_205_p1;
wire   [31:0] zext_ln39_1_fu_249_p1;
wire   [32:0] shl_ln43_1_fu_264_p3;
wire   [63:0] zext_ln43_fu_272_p1;
wire   [63:0] add_ln43_fu_276_p2;
wire   [61:0] trunc_ln1_fu_281_p4;
wire   [33:0] shl_ln_fu_306_p3;
wire  signed [63:0] sext_ln43_1_fu_313_p1;
wire   [63:0] add_ln43_1_fu_317_p2;
wire   [63:0] add_ln43_2_fu_332_p2;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
reg    ap_ST_fsm_state21_blk;
wire   [63:0] gmem_0_AWLEN0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
#0 grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_ap_start_reg = 1'b0;
#0 row_fu_116 = 31'd0;
end

csr_vmul_csr_vmul_Pipeline_VITIS_LOOP_43_2 grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_ap_start),
    .ap_done(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_ap_done),
    .ap_idle(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_ap_idle),
    .ap_ready(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_ap_ready),
    .m_axi_gmem_0_AWVALID(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_AWVALID),
    .m_axi_gmem_0_AWREADY(1'b0),
    .m_axi_gmem_0_AWADDR(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_AWADDR),
    .m_axi_gmem_0_AWID(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_AWID),
    .m_axi_gmem_0_AWLEN(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_AWLEN),
    .m_axi_gmem_0_AWSIZE(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_AWSIZE),
    .m_axi_gmem_0_AWBURST(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_AWBURST),
    .m_axi_gmem_0_AWLOCK(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_AWLOCK),
    .m_axi_gmem_0_AWCACHE(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_AWCACHE),
    .m_axi_gmem_0_AWPROT(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_AWPROT),
    .m_axi_gmem_0_AWQOS(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_AWQOS),
    .m_axi_gmem_0_AWREGION(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_AWREGION),
    .m_axi_gmem_0_AWUSER(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_AWUSER),
    .m_axi_gmem_0_WVALID(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_WVALID),
    .m_axi_gmem_0_WREADY(1'b0),
    .m_axi_gmem_0_WDATA(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_WDATA),
    .m_axi_gmem_0_WSTRB(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_WSTRB),
    .m_axi_gmem_0_WLAST(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_WLAST),
    .m_axi_gmem_0_WID(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_WID),
    .m_axi_gmem_0_WUSER(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_WUSER),
    .m_axi_gmem_0_ARVALID(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARVALID),
    .m_axi_gmem_0_ARREADY(gmem_0_ARREADY),
    .m_axi_gmem_0_ARADDR(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARADDR),
    .m_axi_gmem_0_ARID(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARID),
    .m_axi_gmem_0_ARLEN(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARLEN),
    .m_axi_gmem_0_ARSIZE(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARSIZE),
    .m_axi_gmem_0_ARBURST(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARBURST),
    .m_axi_gmem_0_ARLOCK(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARLOCK),
    .m_axi_gmem_0_ARCACHE(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARCACHE),
    .m_axi_gmem_0_ARPROT(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARPROT),
    .m_axi_gmem_0_ARQOS(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARQOS),
    .m_axi_gmem_0_ARREGION(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARREGION),
    .m_axi_gmem_0_ARUSER(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARUSER),
    .m_axi_gmem_0_RVALID(gmem_0_RVALID),
    .m_axi_gmem_0_RREADY(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_RREADY),
    .m_axi_gmem_0_RDATA(gmem_0_RDATA),
    .m_axi_gmem_0_RLAST(1'b0),
    .m_axi_gmem_0_RID(1'd0),
    .m_axi_gmem_0_RFIFONUM(gmem_0_RFIFONUM),
    .m_axi_gmem_0_RUSER(1'd0),
    .m_axi_gmem_0_RRESP(2'd0),
    .m_axi_gmem_0_BVALID(1'b0),
    .m_axi_gmem_0_BREADY(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_BREADY),
    .m_axi_gmem_0_BRESP(2'd0),
    .m_axi_gmem_0_BID(1'd0),
    .m_axi_gmem_0_BUSER(1'd0),
    .sext_ln43(i_reg_413),
    .wide_trip_count(gmem_addr_1_read_1_reg_419),
    .sext_ln43_2(trunc_ln43_1_reg_424),
    .sext_ln43_3(trunc_ln43_2_reg_429),
    .vector_values(vector_values_read_reg_362),
    .sum_out(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_sum_out),
    .sum_out_ap_vld(grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_sum_out_ap_vld)
);

csr_vmul_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .matrix_row_count(matrix_row_count),
    .matrix_col_count(matrix_col_count),
    .matrix_non_zero_count(matrix_non_zero_count),
    .vector_count(vector_count),
    .out_count(out_count),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

csr_vmul_control_r_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_R_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_R_DATA_WIDTH ))
control_r_s_axi_U(
    .AWVALID(s_axi_control_r_AWVALID),
    .AWREADY(s_axi_control_r_AWREADY),
    .AWADDR(s_axi_control_r_AWADDR),
    .WVALID(s_axi_control_r_WVALID),
    .WREADY(s_axi_control_r_WREADY),
    .WDATA(s_axi_control_r_WDATA),
    .WSTRB(s_axi_control_r_WSTRB),
    .ARVALID(s_axi_control_r_ARVALID),
    .ARREADY(s_axi_control_r_ARREADY),
    .ARADDR(s_axi_control_r_ARADDR),
    .RVALID(s_axi_control_r_RVALID),
    .RREADY(s_axi_control_r_RREADY),
    .RDATA(s_axi_control_r_RDATA),
    .RRESP(s_axi_control_r_RRESP),
    .BVALID(s_axi_control_r_BVALID),
    .BREADY(s_axi_control_r_BREADY),
    .BRESP(s_axi_control_r_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .matrix_row_pointers(matrix_row_pointers),
    .matrix_col_indices(matrix_col_indices),
    .matrix_values(matrix_values),
    .vector_values(vector_values),
    .out_values(out_values)
);

csr_vmul_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 7 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .CH0_USER_RFIFONUM_WIDTH( 9 ),
    .CH0_USER_DW( 32 ),
    .CH0_USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_CH0_ARVALID(gmem_0_ARVALID),
    .I_CH0_ARREADY(gmem_0_ARREADY),
    .I_CH0_ARADDR(gmem_0_ARADDR),
    .I_CH0_ARLEN(gmem_0_ARLEN),
    .I_CH0_RVALID(gmem_0_RVALID),
    .I_CH0_RREADY(gmem_0_RREADY),
    .I_CH0_RDATA(gmem_0_RDATA),
    .I_CH0_RFIFONUM(gmem_0_RFIFONUM),
    .I_CH0_AWVALID(gmem_0_AWVALID),
    .I_CH0_AWREADY(gmem_0_AWREADY),
    .I_CH0_AWADDR(gmem_addr_reg_393),
    .I_CH0_AWLEN(gmem_0_AWLEN),
    .I_CH0_WVALID(gmem_0_WVALID),
    .I_CH0_WREADY(gmem_0_WREADY),
    .I_CH0_WDATA(gmem_0_WDATA),
    .I_CH0_WSTRB(4'd15),
    .I_CH0_BVALID(gmem_0_BVALID),
    .I_CH0_BREADY(gmem_0_BREADY)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state14) & (1'b1 == ap_CS_fsm_state13))) begin
            grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_ap_start_reg <= 1'b1;
        end else if ((grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_ap_ready == 1'b1)) begin
            grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        row_fu_116 <= 31'd0;
    end else if (((icmp_ln39_1_fu_253_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        row_fu_116 <= indvars_iv_next7_fu_258_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_reg_399 <= empty_fu_229_p3;
        gmem_addr_reg_393 <= sext_ln39_fu_219_p1;
        matrix_col_indices_read_reg_372 <= matrix_col_indices;
        matrix_row_count_read_reg_388 <= matrix_row_count;
        matrix_row_pointers_read_reg_377 <= matrix_row_pointers;
        matrix_values_read_reg_367 <= matrix_values;
        vector_values_read_reg_362 <= vector_values;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        gmem_addr_1_read_1_reg_419 <= gmem_0_RDATA;
        trunc_ln43_1_reg_424 <= {{add_ln43_1_fu_317_p2[63:2]}};
        trunc_ln43_2_reg_429 <= {{add_ln43_2_fu_332_p2[63:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gmem_addr_1_reg_407 <= sext_ln43_fu_291_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_reg_413 <= gmem_0_RDATA;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((gmem_0_RVALID == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_0_RVALID == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

assign ap_ST_fsm_state14_blk = 1'b0;

always @ (*) begin
    if ((grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_ap_done == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_0_WREADY == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

always @ (*) begin
    if ((gmem_0_BVALID == 1'b0)) begin
        ap_ST_fsm_state21_blk = 1'b1;
    end else begin
        ap_ST_fsm_state21_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_0_AWREADY == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((gmem_0_ARREADY == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((gmem_0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        gmem_0_ARADDR = gmem_addr_1_reg_407;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15))) begin
        gmem_0_ARADDR = grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARADDR;
    end else begin
        gmem_0_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        gmem_0_ARLEN = 64'd2;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15))) begin
        gmem_0_ARLEN = grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARLEN;
    end else begin
        gmem_0_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        gmem_0_ARVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15))) begin
        gmem_0_ARVALID = grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_ARVALID;
    end else begin
        gmem_0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_0_AWVALID = 1'b1;
    end else begin
        gmem_0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        gmem_0_BREADY = 1'b1;
    end else begin
        gmem_0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12)))) begin
        gmem_0_RREADY = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15))) begin
        gmem_0_RREADY = grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_m_axi_gmem_0_RREADY;
    end else begin
        gmem_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_0_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        gmem_0_WVALID = 1'b1;
    end else begin
        gmem_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((gmem_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln39_1_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((gmem_0_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((gmem_0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln43_1_fu_317_p2 = ($signed(sext_ln43_1_fu_313_p1) + $signed(matrix_values_read_reg_367));

assign add_ln43_2_fu_332_p2 = ($signed(sext_ln43_1_fu_313_p1) + $signed(matrix_col_indices_read_reg_372));

assign add_ln43_fu_276_p2 = (zext_ln43_fu_272_p1 + matrix_row_pointers_read_reg_377);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_NS_fsm_state14 = ap_NS_fsm[32'd13];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_fu_229_p3 = ((icmp_ln39_fu_199_p2[0:0] == 1'b1) ? trunc_ln39_fu_205_p1 : 31'd0);

assign gmem_0_AWLEN = gmem_0_AWLEN0;

assign gmem_0_AWLEN0 = empty_reg_399;

assign gmem_0_WDATA = grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_sum_out;

assign grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_ap_start = grp_csr_vmul_Pipeline_VITIS_LOOP_43_2_fu_187_ap_start_reg;

assign icmp_ln39_1_fu_253_p2 = (($signed(zext_ln39_1_fu_249_p1) < $signed(matrix_row_count_read_reg_388)) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_199_p2 = (($signed(matrix_row_count) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign indvars_iv_next7_fu_258_p2 = (row_fu_116 + 31'd1);

assign sext_ln39_fu_219_p1 = $signed(trunc_ln_fu_209_p4);

assign sext_ln43_1_fu_313_p1 = $signed(shl_ln_fu_306_p3);

assign sext_ln43_fu_291_p1 = $signed(trunc_ln1_fu_281_p4);

assign shl_ln43_1_fu_264_p3 = {{row_fu_116}, {2'd0}};

assign shl_ln_fu_306_p3 = {{i_reg_413}, {2'd0}};

assign trunc_ln1_fu_281_p4 = {{add_ln43_fu_276_p2[63:2]}};

assign trunc_ln39_fu_205_p1 = matrix_row_count[30:0];

assign trunc_ln_fu_209_p4 = {{out_values[63:2]}};

assign zext_ln39_1_fu_249_p1 = row_fu_116;

assign zext_ln43_fu_272_p1 = shl_ln43_1_fu_264_p3;

endmodule //csr_vmul
