// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="csr_vmul_csr_vmul,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=7870983,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=3168,HLS_SYN_LUT=3597,HLS_VERSION=2024_2}" *)

module csr_vmul (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt,
        s_axi_control_r_AWVALID,
        s_axi_control_r_AWREADY,
        s_axi_control_r_AWADDR,
        s_axi_control_r_WVALID,
        s_axi_control_r_WREADY,
        s_axi_control_r_WDATA,
        s_axi_control_r_WSTRB,
        s_axi_control_r_ARVALID,
        s_axi_control_r_ARREADY,
        s_axi_control_r_ARADDR,
        s_axi_control_r_RVALID,
        s_axi_control_r_RREADY,
        s_axi_control_r_RDATA,
        s_axi_control_r_RRESP,
        s_axi_control_r_BVALID,
        s_axi_control_r_BREADY,
        s_axi_control_r_BRESP
);

parameter    ap_ST_fsm_state1 = 49'd1;
parameter    ap_ST_fsm_state2 = 49'd2;
parameter    ap_ST_fsm_state3 = 49'd4;
parameter    ap_ST_fsm_state4 = 49'd8;
parameter    ap_ST_fsm_state5 = 49'd16;
parameter    ap_ST_fsm_state6 = 49'd32;
parameter    ap_ST_fsm_state7 = 49'd64;
parameter    ap_ST_fsm_state8 = 49'd128;
parameter    ap_ST_fsm_state9 = 49'd256;
parameter    ap_ST_fsm_state10 = 49'd512;
parameter    ap_ST_fsm_state11 = 49'd1024;
parameter    ap_ST_fsm_state12 = 49'd2048;
parameter    ap_ST_fsm_state13 = 49'd4096;
parameter    ap_ST_fsm_state14 = 49'd8192;
parameter    ap_ST_fsm_state15 = 49'd16384;
parameter    ap_ST_fsm_state16 = 49'd32768;
parameter    ap_ST_fsm_state17 = 49'd65536;
parameter    ap_ST_fsm_state18 = 49'd131072;
parameter    ap_ST_fsm_state19 = 49'd262144;
parameter    ap_ST_fsm_state20 = 49'd524288;
parameter    ap_ST_fsm_state21 = 49'd1048576;
parameter    ap_ST_fsm_state22 = 49'd2097152;
parameter    ap_ST_fsm_state23 = 49'd4194304;
parameter    ap_ST_fsm_state24 = 49'd8388608;
parameter    ap_ST_fsm_state25 = 49'd16777216;
parameter    ap_ST_fsm_state26 = 49'd33554432;
parameter    ap_ST_fsm_state27 = 49'd67108864;
parameter    ap_ST_fsm_state28 = 49'd134217728;
parameter    ap_ST_fsm_state29 = 49'd268435456;
parameter    ap_ST_fsm_state30 = 49'd536870912;
parameter    ap_ST_fsm_state31 = 49'd1073741824;
parameter    ap_ST_fsm_state32 = 49'd2147483648;
parameter    ap_ST_fsm_state33 = 49'd4294967296;
parameter    ap_ST_fsm_state34 = 49'd8589934592;
parameter    ap_ST_fsm_state35 = 49'd17179869184;
parameter    ap_ST_fsm_state36 = 49'd34359738368;
parameter    ap_ST_fsm_state37 = 49'd68719476736;
parameter    ap_ST_fsm_state38 = 49'd137438953472;
parameter    ap_ST_fsm_state39 = 49'd274877906944;
parameter    ap_ST_fsm_state40 = 49'd549755813888;
parameter    ap_ST_fsm_state41 = 49'd1099511627776;
parameter    ap_ST_fsm_state42 = 49'd2199023255552;
parameter    ap_ST_fsm_state43 = 49'd4398046511104;
parameter    ap_ST_fsm_state44 = 49'd8796093022208;
parameter    ap_ST_fsm_state45 = 49'd17592186044416;
parameter    ap_ST_fsm_state46 = 49'd35184372088832;
parameter    ap_ST_fsm_state47 = 49'd70368744177664;
parameter    ap_ST_fsm_state48 = 49'd140737488355328;
parameter    ap_ST_fsm_state49 = 49'd281474976710656;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_R_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_R_ADDR_WIDTH = 7;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_CONTROL_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;
input   s_axi_control_r_AWVALID;
output   s_axi_control_r_AWREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_AWADDR;
input   s_axi_control_r_WVALID;
output   s_axi_control_r_WREADY;
input  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_WDATA;
input  [C_S_AXI_CONTROL_R_WSTRB_WIDTH - 1:0] s_axi_control_r_WSTRB;
input   s_axi_control_r_ARVALID;
output   s_axi_control_r_ARREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_ARADDR;
output   s_axi_control_r_RVALID;
input   s_axi_control_r_RREADY;
output  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_RDATA;
output  [1:0] s_axi_control_r_RRESP;
output   s_axi_control_r_BVALID;
input   s_axi_control_r_BREADY;
output  [1:0] s_axi_control_r_BRESP;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [48:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] matrix_row_count;
wire   [31:0] matrix_col_count;
wire   [31:0] matrix_non_zero_count;
wire   [63:0] matrix_row_pointers;
wire   [63:0] matrix_col_indices;
wire   [63:0] matrix_values;
wire   [63:0] vector_values;
wire   [31:0] vector_count;
wire   [63:0] out_values;
reg    out_count_ap_vld;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state2;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state44;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state49;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state4;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state34;
reg   [63:0] vector_values_read_reg_543;
reg   [63:0] matrix_values_read_reg_548;
reg   [63:0] matrix_col_indices_read_reg_553;
reg   [63:0] matrix_row_pointers_read_reg_558;
reg   [31:0] matrix_row_count_read_reg_563;
reg   [63:0] gmem_addr_reg_568;
wire   [30:0] empty_fu_316_p3;
reg   [30:0] empty_reg_574;
wire   [30:0] indvars_iv_next7_fu_345_p2;
reg   [30:0] indvars_iv_next7_reg_582;
wire    ap_CS_fsm_state3;
reg   [63:0] gmem_addr_1_reg_587;
reg  signed [31:0] i_reg_593;
wire  signed [63:0] sext_ln47_fu_388_p1;
wire  signed [63:0] wide_trip_count_fu_391_p1;
reg  signed [63:0] wide_trip_count_reg_604;
wire  signed [63:0] sext_ln47_2_fu_421_p1;
reg  signed [63:0] sext_ln47_2_reg_609;
wire  signed [63:0] sext_ln47_3_fu_440_p1;
reg  signed [63:0] sext_ln47_3_reg_614;
wire   [63:0] add_ln47_4_fu_449_p2;
reg   [63:0] add_ln47_4_reg_622;
wire    ap_CS_fsm_state14;
reg   [63:0] gmem_addr_2_reg_627;
reg   [63:0] gmem_addr_3_reg_633;
wire   [63:0] add_ln47_3_fu_477_p2;
reg   [63:0] add_ln47_3_reg_639;
reg   [31:0] gmem_addr_2_read_reg_644;
reg   [31:0] gmem_addr_3_read_reg_649;
reg   [63:0] gmem_addr_4_reg_654;
wire    ap_CS_fsm_state25;
reg   [31:0] gmem_addr_4_read_reg_660;
wire    ap_CS_fsm_state35;
wire   [31:0] grp_fu_282_p2;
reg   [31:0] mul_reg_675;
wire    ap_CS_fsm_state38;
wire   [31:0] grp_fu_277_p2;
wire    ap_CS_fsm_state43;
reg    gmem_0_AWVALID;
wire    gmem_0_AWREADY;
wire   [31:0] gmem_0_AWLEN;
reg    gmem_0_WVALID;
wire    gmem_0_WREADY;
wire   [31:0] gmem_0_WDATA;
reg    gmem_0_ARVALID;
wire    gmem_0_ARREADY;
reg   [63:0] gmem_0_ARADDR;
reg   [31:0] gmem_0_ARLEN;
wire    gmem_0_RVALID;
reg    gmem_0_RREADY;
wire   [31:0] gmem_0_RDATA;
wire   [8:0] gmem_0_RFIFONUM;
wire    gmem_0_BVALID;
reg    gmem_0_BREADY;
reg   [63:0] indvar_reg_245;
reg   [63:0] i_1_reg_256;
reg   [31:0] sum_reg_265;
wire  signed [63:0] sext_ln41_fu_306_p1;
wire  signed [63:0] sext_ln47_1_fu_378_p1;
wire   [0:0] icmp_ln41_1_fu_340_p2;
wire   [63:0] add_ln51_fu_455_p2;
wire   [0:0] icmp_ln47_fu_444_p2;
wire   [63:0] add_ln51_1_fu_466_p2;
wire  signed [63:0] sext_ln51_1_fu_513_p1;
reg   [30:0] row_fu_134;
wire    ap_CS_fsm_state39;
wire   [31:0] grp_fu_282_p0;
wire   [31:0] grp_fu_282_p1;
wire   [61:0] trunc_ln_fu_296_p4;
wire   [0:0] icmp_ln41_fu_286_p2;
wire   [30:0] trunc_ln41_fu_292_p1;
wire   [31:0] zext_ln41_1_fu_336_p1;
wire   [32:0] shl_ln47_1_fu_351_p3;
wire   [63:0] zext_ln47_fu_359_p1;
wire   [63:0] add_ln47_fu_363_p2;
wire   [61:0] trunc_ln1_fu_368_p4;
wire  signed [31:0] wide_trip_count_fu_391_p0;
wire   [33:0] shl_ln_fu_395_p3;
wire  signed [63:0] sext_ln47_4_fu_402_p1;
wire   [63:0] add_ln47_1_fu_406_p2;
wire   [61:0] trunc_ln47_1_fu_411_p4;
wire   [63:0] add_ln47_2_fu_425_p2;
wire   [61:0] trunc_ln47_2_fu_430_p4;
wire   [33:0] shl_ln1_fu_487_p3;
wire  signed [63:0] sext_ln51_fu_494_p1;
wire   [63:0] add_ln51_2_fu_498_p2;
wire   [61:0] trunc_ln2_fu_503_p4;
reg   [48:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
reg    ap_ST_fsm_state23_blk;
reg    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
reg    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
reg    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
reg    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
reg    ap_ST_fsm_state49_blk;
wire   [63:0] gmem_0_AWLEN0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 49'd1;
#0 row_fu_134 = 31'd0;
end

csr_vmul_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .matrix_row_count(matrix_row_count),
    .matrix_col_count(matrix_col_count),
    .matrix_non_zero_count(matrix_non_zero_count),
    .vector_count(vector_count),
    .out_count(matrix_row_count),
    .out_count_ap_vld(out_count_ap_vld),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

csr_vmul_control_r_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_R_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_R_DATA_WIDTH ))
control_r_s_axi_U(
    .AWVALID(s_axi_control_r_AWVALID),
    .AWREADY(s_axi_control_r_AWREADY),
    .AWADDR(s_axi_control_r_AWADDR),
    .WVALID(s_axi_control_r_WVALID),
    .WREADY(s_axi_control_r_WREADY),
    .WDATA(s_axi_control_r_WDATA),
    .WSTRB(s_axi_control_r_WSTRB),
    .ARVALID(s_axi_control_r_ARVALID),
    .ARREADY(s_axi_control_r_ARREADY),
    .ARADDR(s_axi_control_r_ARADDR),
    .RVALID(s_axi_control_r_RVALID),
    .RREADY(s_axi_control_r_RREADY),
    .RDATA(s_axi_control_r_RDATA),
    .RRESP(s_axi_control_r_RRESP),
    .BVALID(s_axi_control_r_BVALID),
    .BREADY(s_axi_control_r_BREADY),
    .BRESP(s_axi_control_r_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .matrix_row_pointers(matrix_row_pointers),
    .matrix_col_indices(matrix_col_indices),
    .matrix_values(matrix_values),
    .vector_values(vector_values),
    .out_values(out_values)
);

csr_vmul_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 7 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .CH0_USER_RFIFONUM_WIDTH( 9 ),
    .CH0_USER_DW( 32 ),
    .CH0_USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_CH0_ARVALID(gmem_0_ARVALID),
    .I_CH0_ARREADY(gmem_0_ARREADY),
    .I_CH0_ARADDR(gmem_0_ARADDR),
    .I_CH0_ARLEN(gmem_0_ARLEN),
    .I_CH0_RVALID(gmem_0_RVALID),
    .I_CH0_RREADY(gmem_0_RREADY),
    .I_CH0_RDATA(gmem_0_RDATA),
    .I_CH0_RFIFONUM(gmem_0_RFIFONUM),
    .I_CH0_AWVALID(gmem_0_AWVALID),
    .I_CH0_AWREADY(gmem_0_AWREADY),
    .I_CH0_AWADDR(gmem_addr_reg_568),
    .I_CH0_AWLEN(gmem_0_AWLEN),
    .I_CH0_WVALID(gmem_0_WVALID),
    .I_CH0_WREADY(gmem_0_WREADY),
    .I_CH0_WDATA(gmem_0_WDATA),
    .I_CH0_WSTRB(4'd15),
    .I_CH0_BVALID(gmem_0_BVALID),
    .I_CH0_BREADY(gmem_0_BREADY)
);

csr_vmul_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sum_reg_265),
    .din1(mul_reg_675),
    .ce(1'b1),
    .dout(grp_fu_277_p2)
);

csr_vmul_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_282_p0),
    .din1(grp_fu_282_p1),
    .ce(1'b1),
    .dout(grp_fu_282_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        i_1_reg_256 <= add_ln47_3_reg_639;
    end else if (((gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        i_1_reg_256 <= sext_ln47_fu_388_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        indvar_reg_245 <= add_ln47_4_reg_622;
    end else if (((gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        indvar_reg_245 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        row_fu_134 <= 31'd0;
    end else if (((icmp_ln47_fu_444_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        row_fu_134 <= indvars_iv_next7_reg_582;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        sum_reg_265 <= grp_fu_277_p2;
    end else if (((gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        sum_reg_265 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_ln47_3_reg_639 <= add_ln47_3_fu_477_p2;
        add_ln47_4_reg_622 <= add_ln47_4_fu_449_p2;
        gmem_addr_2_reg_627 <= add_ln51_fu_455_p2;
        gmem_addr_3_reg_633 <= add_ln51_1_fu_466_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_reg_574 <= empty_fu_316_p3;
        gmem_addr_reg_568 <= sext_ln41_fu_306_p1;
        matrix_col_indices_read_reg_553 <= matrix_col_indices;
        matrix_row_count_read_reg_563 <= matrix_row_count;
        matrix_row_pointers_read_reg_558 <= matrix_row_pointers;
        matrix_values_read_reg_548 <= matrix_values;
        vector_values_read_reg_543 <= vector_values;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gmem_addr_1_reg_587 <= sext_ln47_1_fu_378_p1;
        indvars_iv_next7_reg_582 <= indvars_iv_next7_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        gmem_addr_2_read_reg_644 <= gmem_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        gmem_addr_3_read_reg_649 <= gmem_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        gmem_addr_4_read_reg_660 <= gmem_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        gmem_addr_4_reg_654 <= sext_ln51_1_fu_513_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_reg_593 <= gmem_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        mul_reg_675 <= grp_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        sext_ln47_2_reg_609 <= sext_ln47_2_fu_421_p1;
        sext_ln47_3_reg_614 <= sext_ln47_3_fu_440_p1;
        wide_trip_count_reg_604 <= wide_trip_count_fu_391_p1;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((gmem_0_RVALID == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_0_RVALID == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

assign ap_ST_fsm_state14_blk = 1'b0;

always @ (*) begin
    if ((gmem_0_ARREADY == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_0_ARREADY == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

always @ (*) begin
    if ((gmem_0_RVALID == 1'b0)) begin
        ap_ST_fsm_state23_blk = 1'b1;
    end else begin
        ap_ST_fsm_state23_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_0_RVALID == 1'b0)) begin
        ap_ST_fsm_state24_blk = 1'b1;
    end else begin
        ap_ST_fsm_state24_blk = 1'b0;
    end
end

assign ap_ST_fsm_state25_blk = 1'b0;

always @ (*) begin
    if ((gmem_0_ARREADY == 1'b0)) begin
        ap_ST_fsm_state26_blk = 1'b1;
    end else begin
        ap_ST_fsm_state26_blk = 1'b0;
    end
end

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

always @ (*) begin
    if ((gmem_0_AWREADY == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

always @ (*) begin
    if ((gmem_0_RVALID == 1'b0)) begin
        ap_ST_fsm_state34_blk = 1'b1;
    end else begin
        ap_ST_fsm_state34_blk = 1'b0;
    end
end

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

always @ (*) begin
    if ((gmem_0_WREADY == 1'b0)) begin
        ap_ST_fsm_state44_blk = 1'b1;
    end else begin
        ap_ST_fsm_state44_blk = 1'b0;
    end
end

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

always @ (*) begin
    if ((gmem_0_BVALID == 1'b0)) begin
        ap_ST_fsm_state49_blk = 1'b1;
    end else begin
        ap_ST_fsm_state49_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_0_ARREADY == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((gmem_0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_0_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state26)) begin
            gmem_0_ARADDR = gmem_addr_4_reg_654;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            gmem_0_ARADDR = gmem_addr_3_reg_633;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            gmem_0_ARADDR = gmem_addr_2_reg_627;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            gmem_0_ARADDR = gmem_addr_1_reg_587;
        end else begin
            gmem_0_ARADDR = 'bx;
        end
    end else begin
        gmem_0_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15)))) begin
        gmem_0_ARLEN = 64'd1;
    end else if (((gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        gmem_0_ARLEN = 64'd2;
    end else begin
        gmem_0_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        gmem_0_ARVALID = 1'b1;
    end else begin
        gmem_0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_0_AWVALID = 1'b1;
    end else begin
        gmem_0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
        gmem_0_BREADY = 1'b1;
    end else begin
        gmem_0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12)))) begin
        gmem_0_RREADY = 1'b1;
    end else begin
        gmem_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_0_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
        gmem_0_WVALID = 1'b1;
    end else begin
        gmem_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state4))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        out_count_ap_vld = 1'b1;
    end else begin
        out_count_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((gmem_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln41_1_fu_340_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((icmp_ln47_fu_444_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (((gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state44 : begin
            if (((gmem_0_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            if (((gmem_0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln47_1_fu_406_p2 = ($signed(sext_ln47_4_fu_402_p1) + $signed(matrix_values_read_reg_548));

assign add_ln47_2_fu_425_p2 = ($signed(sext_ln47_4_fu_402_p1) + $signed(matrix_col_indices_read_reg_553));

assign add_ln47_3_fu_477_p2 = (i_1_reg_256 + 64'd1);

assign add_ln47_4_fu_449_p2 = (indvar_reg_245 + 64'd1);

assign add_ln47_fu_363_p2 = (zext_ln47_fu_359_p1 + matrix_row_pointers_read_reg_558);

assign add_ln51_1_fu_466_p2 = ($signed(indvar_reg_245) + $signed(sext_ln47_3_reg_614));

assign add_ln51_2_fu_498_p2 = ($signed(sext_ln51_fu_494_p1) + $signed(vector_values_read_reg_543));

assign add_ln51_fu_455_p2 = ($signed(indvar_reg_245) + $signed(sext_ln47_2_reg_609));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_fu_316_p3 = ((icmp_ln41_fu_286_p2[0:0] == 1'b1) ? trunc_ln41_fu_292_p1 : 31'd0);

assign gmem_0_AWLEN = gmem_0_AWLEN0;

assign gmem_0_AWLEN0 = empty_reg_574;

assign gmem_0_WDATA = sum_reg_265;

assign grp_fu_282_p0 = gmem_addr_2_read_reg_644;

assign grp_fu_282_p1 = gmem_addr_4_read_reg_660;

assign icmp_ln41_1_fu_340_p2 = (($signed(zext_ln41_1_fu_336_p1) < $signed(matrix_row_count_read_reg_563)) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_286_p2 = (($signed(matrix_row_count) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_444_p2 = (($signed(i_1_reg_256) < $signed(wide_trip_count_reg_604)) ? 1'b1 : 1'b0);

assign indvars_iv_next7_fu_345_p2 = (row_fu_134 + 31'd1);

assign sext_ln41_fu_306_p1 = $signed(trunc_ln_fu_296_p4);

assign sext_ln47_1_fu_378_p1 = $signed(trunc_ln1_fu_368_p4);

assign sext_ln47_2_fu_421_p1 = $signed(trunc_ln47_1_fu_411_p4);

assign sext_ln47_3_fu_440_p1 = $signed(trunc_ln47_2_fu_430_p4);

assign sext_ln47_4_fu_402_p1 = $signed(shl_ln_fu_395_p3);

assign sext_ln47_fu_388_p1 = i_reg_593;

assign sext_ln51_1_fu_513_p1 = $signed(trunc_ln2_fu_503_p4);

assign sext_ln51_fu_494_p1 = $signed(shl_ln1_fu_487_p3);

assign shl_ln1_fu_487_p3 = {{gmem_addr_3_read_reg_649}, {2'd0}};

assign shl_ln47_1_fu_351_p3 = {{row_fu_134}, {2'd0}};

assign shl_ln_fu_395_p3 = {{i_reg_593}, {2'd0}};

assign trunc_ln1_fu_368_p4 = {{add_ln47_fu_363_p2[63:2]}};

assign trunc_ln2_fu_503_p4 = {{add_ln51_2_fu_498_p2[63:2]}};

assign trunc_ln41_fu_292_p1 = matrix_row_count[30:0];

assign trunc_ln47_1_fu_411_p4 = {{add_ln47_1_fu_406_p2[63:2]}};

assign trunc_ln47_2_fu_430_p4 = {{add_ln47_2_fu_425_p2[63:2]}};

assign trunc_ln_fu_296_p4 = {{out_values[63:2]}};

assign wide_trip_count_fu_391_p0 = gmem_0_RDATA;

assign wide_trip_count_fu_391_p1 = wide_trip_count_fu_391_p0;

assign zext_ln41_1_fu_336_p1 = row_fu_134;

assign zext_ln47_fu_359_p1 = shl_ln47_1_fu_351_p3;

endmodule //csr_vmul
